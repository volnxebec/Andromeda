#!/usr/local/bin/expect --
#
# Initialize any default over-ride variables
  set ANG_FORMAT ""
#
# Load settings from input file 
  set input_file ./obs_tbl.inp
#
# Automate the Horizons session required to produce an OBSERVER TABLE.
# This script is available at ftp://ssd.jpl.nasa.gov/pub/ssd/obs_tbl
# An example input file is at ftp://ssd.jpl.nasa.gov/pub/ssd/obs_tbl.inp
#
# Version 1.0                                              (Expect v.5.18)
#
# Modification History:
#
#  DATE         Who  Change
#  -----------  ---  ---------------------------------------------------------
#  2003-Aug-19  JDG  V1.0 (derived from script "smb_spk").
#  2012-Sep-14  JDG  Fixed to allow passing negative station site codes.
#                    Fixed FTP dialogue case to match new server
#                    Changed handling of START_TIME dialogue
#                    Added support of ANG_FORMAT default over-ride
#                     as an example of changing the default settings.
#  2013-Feb-13  JDG  Added example to doc for specifying spacecraft 
#                     (i.e., passing negative ID numbers)
#
# Key:
#  JDG= Jon.D.Giorgini@jpl.nasa.gov
#
# BACKGROUND:
# -----------
#
#   This script ("obs_tbl") and companion input file ("obs_tbl.inp") allows a 
# user to type one command on a workstation and produce a Horizons ASCII 
# observer-table file on that same machine.
#
#   The script offers network transparency by connecting to the JPL Horizons
# ephemeris system, automating the interaction with it, then transferring the 
# file by FTP back to the user's local machine.
#
# COMMAND LINE:
# -------------
#
#   obs_tbl [target] {output_file}
#
# EXPLANATION:
# ------------
#
#   [target]
# 
#            A Horizons command specifying a single target (a planet, satellite,
#            asteroid, comet or spacecraft). 
#
#            Note that ID numbers provide unique matches, while name strings 
#            often do not. For example, string "Io" would match satellite Io 
#            and Iocaste (and some other cases), while "501" uniquely specifies 
#            the Jovian  satellite. Enclose string in quotes (and possibly also
#            braces if a negative number, such as spacecraft ID). See below for 
#            examples and Horizons documentation for details on specifying 
#            objects.
#
#                   http://ssd.jpl.nasa.gov/horizons.html. 
#
#              Examples: "DES= 1999 JM8;" (Asteroid with designation 1999 JM8) 
#                        "12084;"         (Unnumbered ast. in record 12084)
#                        "4179;"          (Numbered asteroid 4179 Toutatis)
#                        "433;"           (Numbered asteroid 433 Eros)
#                        "DES= 3102762;"  (Object w/SPICE-ID 3102762 (2002 AA29)
#                        "Golevka;"       (Named asteroid 6489 Golevka)
#                        "501"            (Jovian satellite Io)
#                        "Venus"          (Planet Venus)
#                        "Tethys"         (Saturnian satellite Tethys)
#                        "301"            (Earth's Moon)
#                        "399"            (Earth planet center)
#                        "3"              (Earth-Moon barycenter)
#                        "{-236}"         (MESSENGER spacecraft .. braces needed
#                                          to pass negative numbers)
#
#   {output_file}
#
#            Optional name to give the output file on your system. If not
#            specified, the command-line [target] string is used to assign 
#            a local file name in the current directory. Default form:
#               
#                 [target].txt
# 
#            For example, 
#
#               obs_tbl "DES=1000003" 
#
#            ... would produce an output file name "DES=1000003.txt",
#            whereas
# 
#                obs_tbl "DES=1000003" 1000003.txt
#
#            ... would produce an output file named "1000003.txt"
#
#
# Command-line arguments need quotes if they contain spaces or a semi-colon. 
# In such a case, quotes guarantee the whole argument is passed literally to
# the script without being improperly parsed into components. Instead of 
# remembering this, one could also just enclose all command-line arguments 
# in quotes as routine usage.
#
# REQUIREMENTS
# ------------
#
# #1) This script looks for an input file whose pathname is defined above
# in the variable "input_file". This input file contains minimal control
# settings to define the Horizons request:
#
# Example input file:
#
# set   EMAIL_ADDR           " "
# set   CENTER               "@SIRTF"
# set   START_TIME           "2004-Jan-1 12:00"
# set   STOP_TIME            "2004-Mar-7" 
# set   STEP_SIZE            "1d"
# set   QUANTITIES           "1,36,37,38"
#
# #2) "obs_tbl" is written in the Expect automation language. The Expect
# interpretation program must be present on any computer system before 
# obs_tbl can run.
#
#   The Expect language is available for download at the URL:
#
#                      http://expect.nist.gov/
#
#   Expect is an extension of the TCL/TK languages, which are also required.
# The web site provides appropriate links. Installation procedures are
# provided and all packages can typically be installed and their self-check
# tests completed in about 45 minutes by following the directions.
#
#   Expect is primarily supported on UNIX platforms, but versions for other 
# systems do exist. A useful book on the language is "Exploring Expect" by
# Don Libes (ISBN 1-56592-090-2)
# 
#   Once the Expect language is installed on your machine, you may need to
# alter the very first line of this script ("#!/usr/local/bin/expect") to
# point to the installation location on that machine.  The script will then
# be able to execute.
#
#   The user's machine must be able to resolve Internet domain names and
# support FTP.
#
# USAGE
# -----
# 
#   The script will handle most errors and respond with an indicator message.
#
#   Things to keep in mind:
#
#  #1) If the search parameters given on the command-line don't match 
# anything in the Horizons database, the script will cancel. Similarly, if
# several objects match, the script will also cancel.
#
#   This latter case occurs most often with comets. The Horizons database
# typically stores orbital elements for the same comet at more than one epoch
# (the different apparitions), because non-gravitational parameters such as
# outgassing may change from apparition to apparition. Thus, if requesting 
# "DES=1P;", while that does uniquely specify Halley's comet, it does not 
# indicate which of the several apparition records to use. Thus, the script 
# will cancel with a "non-unique match" message.  
#
#   Therefore, for comets, one must give the specific database record number 
# of the desired apparition. For example, "201819;" selects the 1986 Halley
# apparition. "201820;" selects the 2061 apparition. ALTERNATIVELY, one may
# add the "CAP;" specification to the command line. This will allow Horizons
# to automatically select the closest prior comet apparition solution in the 
# database. For example, "DES=1P; CAP;" will uniquely return the last comet
# Halley apparition orbit.
#
#   It may be necessary to manually connect to Horizons and look at the list
# of records it provides so as to narrow your selection.  Object selection is 
# discussed in detail in the Horizons documentation. This script doesn't 
# function any differently, but its' deliberately non-interactive approach
# doesn't provide the same level of feedback. One can check the comments 
# section of the returned SPK file to verify the object is the one expected.  
#
#   Examples of ways to specify objects:
# 
#      "DES= 1950 DA;"
#      "Ceres"
#      "3;"    (request numbered asteroid 3 Juno)
#
#   See Horizons documentations for additional information.
#
# #2)  It takes several seconds to look up an object, then up to a couple 
# minutes to generate and transfer the table, depending on how much numerical 
# integration is required and the network state. 
#
# #3)  The script returns a standard exit status code (0=OK, 1=FAILED) which 
# can be checked by other calling programs. 
#
#-----------------------------------------------------------------------------
#
# Initialize 
  set start_flag 0
 
# Establish defaults, turn debugging on or off
# --------------------------------------------
  exp_internal 0
  set timeout  60
  remove_nulls 0

# Set Horizons constants
# ----------------------
  set horizons_machine ssd.jpl.nasa.gov
  set horizons_ftp_dir pub/ssd/

# Cancel terminal negotiation (Horizons specific)
# -----------------------------------------------
  set env(TERM) no-resize-vt100

# Turn off output (set quiet 0; set quiet 1 to observe process)
# -------------------------------------------------------------
  set quiet 0
  log_user $quiet

# Load Horizons run control file
# ------------------------------
  if [ file exists $input_file ] {
   source $input_file
} else {
   puts "Missing input file $input_file"
   exit 1
 }

# Command line values; check for input problems
# ---------------------------------------------
  set argc [llength $argv]
 
  if {$argc < 1} {
   puts "\nMissing argument. Usage:"
   puts { obs_tbl [target] {output_file} }
   puts " "
   puts "Example --"
   puts { obs_tbl "DES=1950 DA;" 1950da.txt}
   puts " "
   exit 1 
} elseif {$argc > 2} {
   puts "\nToo many arguments. May need to use quotes.  Usage:"
   puts { obs_tbl [target] {output_file} }
   puts " "
   puts "Example --"
   puts { obs_tbl "DES=1950 DA;" 1950da.txt}
   puts " "
   exit 1 
} elseif {$argc == 1} {
   set local_file [join [lindex $argv 0] ""]
   set local_file [string trim $local_file]
   set local_file [string trimright $local_file ";"].txt
} elseif {$argc == 2} {
   set local_file [lindex $argv 1]
  }

# Connect to Horizons 
# -------------------
# spawn telnet $horizons_machine 6775
  spawn telnet horizons.jpl.nasa.gov 6775

# Get main prompt and proceed 
# ---------------------------
  expect { 
   timeout        {puts "No response from horizons.jpl.nasa.gov"; exit 1} 
   "unknown host" {puts "This system cannot find horizons.jpl.nasa.gov"; exit 1}
   "Horizons> "   {send PAGE\r} }
  expect { 
   "Horizons> "   {send [lindex $argv 0]\r} }

# Handle prompt search/select
# ---------------------------
  expect {
   -re ".*Continue.*: $"   { 
      send yes\r 
      expect {
         -re ".*PK.*: $"   { send E\r  }
         -re ".*lay.*: $"  { 
            send x\r 
            puts "\nCancelled -- unique object not found: [lindex $argv 1]"
            puts "\nObject not matched to database OR multiple matches found."
            puts " "
            exit 1
          }
       }
   }
   -re ".*such object record.*" {
      send x/r
      puts "\nNo such object record found: [lindex $argv 1]"
      puts " "
      exit 1 }
   -re ".*Select.*<cr>: $" { send E\r   }
  }

# Request observer table
# ----------------------
  expect { 
   -re ".*Observe, Elements.*: $" {
        send O\r }
     } 

# Provide coordinate/observing center
# -----------------------------------
  expect {
    -re ".*Coordinate center.*: $" {
        send -- $CENTER\r }
     }

# Handle coordinate/observing center error or confirmation 
# --------------------------------------------------------
  expect {
    -re ".*Cannot find central body.*: $" {
        send X\r  
        puts "\nCannot find CENTER given in $input_file (no match): CENTER= '$CENTER'"
        puts " "
        exit 1 }
    -re ".*Select.*<cr>: $" {
        send X\r  
        puts "\nNon-unique CENTER in $input_file (multiple matches): CENTER= '$CENTER'"
        puts " "
        exit 1 }
    -re ".*Coordinate center.*<cr>: $" {
        send X\r  
        puts "\nNon-unique CENTER in $input_file (multiple matches): CENTER= '$CENTER'"
        puts " "
        exit 1 }
    -re ".*Confirm selected.*> " {
        send Y\r }
    -re ".*Starting UT.*: $" {
        set start_flag 1
        send $START_TIME\r }
     }

# Handle start date 
# -----------------
  if { $start_flag < 1 } {
   expect {
     -re ".*Starting UT.*: $" {
         send $START_TIME\r }
      }
  }

# Handle start date error or STOP date
# ------------------------------------
  expect {
    -re ".*Cannot interpret.*: $" {
       send X\r
       puts "\nError in $input_file date format: START_TIME= '$START_TIME'"
       puts "See Horizons documentation for acceptable format."
       puts " "
       exit 1 }
    -re ".*No ephemeris.*: $" {
       send X\r
       puts "\nInput file $input_file START_TIME= '$START_TIME' prior to available ephemeris"
       puts " "
       exit 1 }
    -re ".*Ending.*: $" {
       send $STOP_TIME\r }
     }

# Handle stop date error or get step size
# ---------------------------------------
  expect {
    -re ".*Cannot interpret.*" {
       send X\r
       puts "\nError in $input_file date format: STOP_TIME= '$STOP_TIME'"
       puts "See Horizons documentation for acceptable format."
       puts " "
       exit 1 }
    -re ".*No ephemeris.*" {
       send X\r
       puts "\nInput file $input_file STOP_TIME= '$STOP_TIME' date beyond available ephemeris."
       puts " "
       exit 1 }
    -re ".*Output interval.*: $" {
       send $STEP_SIZE\r }
   }
  set timeout -1

# Handle step-size error or set defaults if any changes requested
# ---------------------------------------------------------------
  expect { 
   -re ".*Unknown.*\n" {
       send X\r
       puts [string trimright "$expect_out(0,string)" "\n"]
       puts "Input file $input_file STEP_SIZE= '$STEP_SIZE' error."
       exit 1 }
   -re "Projected.*\n" {
       puts [string trimright "$expect_out(0,string)" "\n"]
       puts "Input file $input_file STEP_SIZE= '$STEP_SIZE' error (or date range too big)."
       send X\r
       exit 1 }
   -re ".*Accept default.*: $" {
       if { [string length $ANG_FORMAT] > 0 } {
         send N\r 
        } else {
         send Y\r
        }
       }
    } 
#
# Set output quantities
  expect {
   -re ".*Select table quantities.*: $" {
       send $QUANTITIES\r }
   }
#
# Get errors on input QUANTITIES, or start through rest of default settings 
# or match FTP request if no default changes
  expect {
    -re ".*Unknown quantity requested.*" {
        send X\r
        puts "\nUnknown value in $input_file QUANTITIES list."
        puts " "
        exit 1 }
    -re ".*Must specify QUANTITIES to output.*" {
        send X\r
        puts "\nMust assign non-null value in $input_file QUANTITIES list."
        puts " "
        exit 1 }
    -re ".*Select.*: $" {
        send F\r }
    -re ".*] : $" {
        send \r }
   }
#
# Skip through defaults if necessary (not yet handled) and set angular format
# if it was specified in the input file
   if { [string length $ANG_FORMAT] > 0 } {
     while 1 {
      expect { 
       -re ".*Output R.A. format.*] : $" break
       -re ".*] : $" {
           send \r }
      }
     }
#
# We hit the request for angular format, send value, process any error
  send $ANG_FORMAT\r
     expect {
       -re ".*Cannot interpret.*: $" {
          send X\r
          puts "\nError in $input_file date format: ANG_FORMAT= '$ANG_FORMAT'"
          puts "See Horizons documentation for acceptable values."
          puts " "
          exit 1 }
       -re ".*] : $" {
           send \r }
     }
#
# Null respond through the rest of the default changes
     while 1 {
      expect { 
       -re ".*Select.*: $" break
       -re ".*] : $" {
           send \r }
      }
     }
     send F\r 
   }

# Pick out ftp file name
# ----------------------
  expect {
   -re "File name   : (.*)\r\r\n   File type" {
       set ftp_name $expect_out(1,string) }
       send "X\r"
   }

# Retrieve file by anonymous FTP
# ------------------------------
  set timeout 30
  spawn ftp horizons.jpl.nasa.gov
  expect {
     timeout {puts "Cancelled -- FTP server not responding."; exit 1 }
     -re "Name.*: $"
   } 
  send "anonymous\r"
  expect "Password:"

# Next bit is HP-UNIX work-around
# -------------------------------
  set oldpw $EMAIL_ADDR
  if [regsub @ $oldpw '\134@' pw] {
    set newpw $pw
  } else {
    set newpw $oldpw
  }
  send $newpw\r

  expect {
    "Login failed." { 
       send "quit\r" 
       puts "\nFTP login failed -- must use full Internet e-mail address."
       puts "Example:  'joe@your.domain.name'"
       puts " "
       exit 1 }
    "ftp> " { send ascii\r    } 
   }
  expect "ftp> " { send "cd pub/ssd\r" }

  set timeout -1
  expect "ftp> " { send "get $ftp_name $local_file\r" }
  expect {
     -re ".*No such.*" {
       puts "\nError -- cannot find $ftp_name on server."
       puts " "
       exit 1 }
     "ftp> " { send "quit\r" }
   }

# Finished, set status code 
# -------------------------
  exit 0
